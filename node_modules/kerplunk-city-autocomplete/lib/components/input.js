(function() {
  var DOM, React, _;

  _ = require('lodash');

  React = require('react');

  DOM = React.DOM;

  module.exports = React.createFactory(React.createClass({
    getDefaultProps: function() {
      return {
        onChange: function() {},
        onSelect: function() {}
      };
    },
    getInitialState: function() {
      var currentVal, ref;
      currentVal = this.props.city ? this.formatCity(this.props.city) : '';
      return {
        active: false,
        currentVal: currentVal,
        results: [],
        city: (ref = this.props.city) != null ? ref : {},
        selectedCityKey: ''
      };
    },
    componentDidMount: function() {
      window.autocompleteComponent = this;
      this.history = {};
      this.cache = [];
      this.socket = this.props.getSocket('public-city-autocomplete');
      return this.socket.on('data', (function(_this) {
        return function(data) {
          var exists;
          if (!_this.isMounted()) {
            return console.log('stahp');
          }
          exists = _.find(_this.cache, function(item) {
            return item.guid === data.guid;
          });
          if (!exists) {
            _this.cache.push(data);
          }
          return _this.updateResults();
        };
      })(this));
    },
    componentWillUnmount: function() {
      return this.socket.off('data');
    },
    componentWillReceiveProps: function(newProps) {
      var formatted;
      if (newProps.city) {
        formatted = this.formatCity(newProps.city);
        this.setState({
          city: newProps.city,
          currentVal: formatted
        });
      }
      return true;
    },
    formatCity: function(city) {
      var country, name, population, region, segments;
      name = city.name, region = city.region, country = city.country, population = city.population;
      segments = [name];
      if ((region != null ? region.length : void 0) > 0) {
        segments.push(region);
      }
      if (!/united states/i.test(country)) {
        segments.push(country);
      }
      segments = _.compact(segments);
      if (!(segments.length > 0)) {
        return '';
      }
      return segments.join(', ');
    },
    updateResults: function(currentVal) {
      var match, pattern, patterns, results, val, words;
      if (currentVal == null) {
        currentVal = this.state.currentVal;
      }
      val = currentVal.toLowerCase();
      pattern = /\b([a-zA-Z]+)\b/g;
      words = [];
      patterns = [];
      while (match = pattern.exec(val)) {
        words.push(match[1]);
        patterns.push(new RegExp("\\b" + match[1], 'i'));
      }
      results = _(this.cache).filter(function(item) {
        var fullname, i, len;
        fullname = [item.name, item.region, item.country].join(', ').toLowerCase();
        for (i = 0, len = patterns.length; i < len; i++) {
          pattern = patterns[i];
          if (!pattern.test(fullname)) {
            return false;
          }
        }
        return words.length > 0 && words[0].length > 0;
      }).sortBy((function(_this) {
        return function(item) {
          var itemLat, itemLng, lat, lng, ref, ref1, ref2, ref3, ref4;
          if (((ref = _this.props.location) != null ? ref.length : void 0) === 2) {
            itemLng = (ref1 = item.lng) != null ? ref1 : (ref2 = item.location) != null ? ref2[0] : void 0;
            itemLat = (ref3 = item.lat) != null ? ref3 : (ref4 = item.location) != null ? ref4[1] : void 0;
            lng = Math.abs(itemLng - _this.props.location[0]);
            lat = Math.abs(itemLat - _this.props.location[1]);
            return -item.population * 0.01 + 1000 * (10 + Math.sqrt(lng * lng + lat * lat));
          } else {
            return -item.population;
          }
        };
      })(this)).value().slice(0, 10);
      return this.setState({
        results: results,
        currentVal: currentVal
      });
    },
    onChange: function(e) {
      var _keyword, keyword;
      keyword = e.target.value;
      _keyword = keyword != null ? keyword.toLowerCase() : void 0;
      if ((_keyword != null ? typeof _keyword.replace === "function" ? _keyword.replace(/[^a-z]/gi, '').length : void 0 : void 0) > 0 && !this.history[_keyword]) {
        this.socket.write({
          keyword: _keyword
        });
        this.history[_keyword] = true;
      }
      return this.updateResults(keyword);
    },
    onFocus: function(e) {
      var el;
      el = e.target;
      setTimeout(function() {
        el.selectionStart = 0;
        return el.selectionEnd = el.value.length;
      }, 1);
      this.updateResults(e.target.value);
      return this.setState({
        active: true,
        currentVal: e.target.value
      });
    },
    onBlur: function() {
      return setTimeout((function(_this) {
        return function() {
          if (!_this.isMounted()) {
            return;
          }
          return _this.setState({
            active: false,
            currentVal: _this.formatCity(_this.state.city)
          });
        };
      })(this), 100);
    },
    selectCity: function(city) {
      return (function(_this) {
        return function(e) {
          e.preventDefault();
          console.log('select city!', city);
          return _this.props.onSelect(city);
        };
      })(this);
    },
    selectByKey: function(guid) {
      var city;
      city = _.find(this.cache, function(city) {
        return city.guid === guid;
      });
      if (city) {
        this.props.onSelect(city);
        return this.setState({
          currentVal: this.formatCity(city)
        });
      }
    },
    onKeyPress: function(e) {
      var DOWN, ENTER, TAB, UP, dir, index, ref, ref1, ref2, ref3;
      TAB = 9;
      ENTER = 13;
      UP = 38;
      DOWN = 40;
      if (e.keyCode === UP || e.keyCode === DOWN) {
        dir = e.keyCode === UP ? -1 : 1;
        e.preventDefault();
        console.log('shhh', this.state.selectedCityKey);
        index = _.findIndex(this.state.results, (function(_this) {
          return function(city) {
            return city.guid === _this.state.selectedCityKey;
          };
        })(this));
        if ((index == null) || index === -1) {
          this.setState({
            selectedCityKey: dir === 1 ? (ref = this.state.results[0]) != null ? ref.guid : void 0 : (ref1 = this.state.results[((ref2 = this.state.results) != null ? ref2.length : void 0) - 1]) != null ? ref1.guid : void 0
          });
          return;
        }
        index += dir;
        if ((ref3 = this.state.results[index]) != null ? ref3.guid : void 0) {
          this.setState({
            selectedCityKey: this.state.results[index].guid
          });
        }
        return;
      }
      if (e.keyCode === ENTER || e.keyCode === TAB) {
        e.preventDefault();
        return this.selectByKey(this.state.selectedCityKey);
      }
    },
    render: function() {
      var exactMatch;
      exactMatch = (function(_this) {
        return function() {
          return _.find(_this.state.results, function(city) {
            return _this.state.currentVal === _this.formatCity(city);
          });
        };
      })(this);
      return DOM.div({
        className: 'city-autocomplete'
      }, DOM.input({
        value: this.state.currentVal,
        placeholder: 'autocomplete',
        onChange: this.onChange,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onKeyDown: this.onKeyPress
      }), this.state.active && this.state.results.length > 0 && !exactMatch() ? DOM.div({
        className: 'city-autocomplete-results'
      }, _.map(this.state.results, (function(_this) {
        return function(city) {
          return DOM.a({
            key: city.guid,
            href: '#',
            onClick: _this.selectCity(city),
            className: _this.state.selectedCityKey === city.guid ? 'city-selected' : ''
          }, _this.formatCity(city));
        };
      })(this))) : null);
    }
  }));

}).call(this);
