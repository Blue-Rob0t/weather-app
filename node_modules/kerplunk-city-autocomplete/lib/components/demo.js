(function() {
  var DOM, Input, React, _;

  _ = require('lodash');

  React = require('react');

  Input = require('./input');

  DOM = React.DOM;

  module.exports = React.createFactory(React.createClass({
    getInitialState: function() {
      var ref, ref1, ref2;
      return {
        location: (ref = this.props.location) != null ? ref : {},
        coords: [(ref1 = this.props.longitude) != null ? ref1 : 0, (ref2 = this.props.latitude) != null ? ref2 : 0],
        useCoords: true
      };
    },
    componentWillReceiveProps: function(props) {
      var diff, ref, ref1;
      diff = {};
      if ((props.location != null) && !_.isEqual(props.location, this.state.location)) {
        diff.location = props.location;
      }
      if ((props.longitude != null) || (props.latitude != null)) {
        diff.coords = [(ref = props.longitude) != null ? ref : this.state.longitude, (ref1 = props.latitude) != null ? ref1 : this.state.latitude];
      }
      if (Object.keys(diff).length > 0) {
        return this.setState(diff);
      }
    },
    updateCoord: function(key) {
      return (function(_this) {
        return function(e) {
          var coords, ref;
          coords = (ref = _this.state.coords) != null ? ref : [];
          coords[key] = e.target.value;
          return _this.setState({
            coords: coords
          });
        };
      })(this);
    },
    toggleCoords: function(e) {
      return this.setState({
        useCoords: e.target.checked
      });
    },
    setCoordsTo: function(coords) {
      return (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.setState({
            coords: coords
          });
        };
      })(this);
    },
    render: function() {
      var coords, ref;
      this.props.getComponent('kerplunk-city-autocomplete:input');
      coords = [parseFloat(this.state.coords[0]), parseFloat(this.state.coords[1])];
      if (isNaN(coords[0]) || isNaN(coords[1])) {
        coords = null;
      }
      if ((coords != null ? coords[0] : void 0) === 0 && (coords != null ? coords[1] : void 0) === 0) {
        coords = null;
      }
      if (!this.state.useCoords) {
        coords = null;
      }
      console.log('coords', coords);
      return DOM.section({
        className: 'content'
      }, DOM.h3(null, 'City Autocomplete Demo'), DOM.div({
        className: 'row'
      }, DOM.div({
        className: 'col col-sm-6'
      }, Input(_.extend({}, this.props, {
        onChange: function() {},
        city: this.state.location,
        location: (coords ? coords : void 0),
        onSelect: (function(_this) {
          return function(city) {
            var ref, ref1;
            console.log('setting location', city);
            if (_this.props.onChange) {
              _this.props.onChange({
                location: city,
                longitude: city != null ? (ref = city.location) != null ? ref[0] : void 0 : void 0,
                latitude: city != null ? (ref1 = city.location) != null ? ref1[1] : void 0 : void 0
              });
            }
            return _this.setState({
              location: city
            });
          };
        })(this)
      })), ((ref = this.state.location) != null ? ref.guid : void 0) ? DOM.pre(null, JSON.stringify(this.state.location, null, 2)) : void 0), DOM.div({
        className: 'col col-sm-6'
      }, DOM.p(null, DOM.input({
        type: 'checkbox',
        id: 'useCoords',
        onChange: this.toggleCoords,
        checked: this.state.useCoords
      }), ' ', DOM.label({
        htmlFor: 'useCoords'
      }, 'use coordinates', coords ? " (" + coords[0] + ", " + coords[1] + ")" : void 0)), DOM.p(null, DOM.h4(null, 'longitude'), DOM.input({
        onChange: this.updateCoord(0),
        placeholder: 'longitude',
        value: this.state.coords[0]
      })), DOM.p(null, DOM.h4(null, 'latitude'), DOM.input({
        onChange: this.updateCoord(1),
        placeholder: 'latitude',
        value: this.state.coords[1]
      })), DOM.p(null, DOM.a({
        href: '#',
        onClick: this.setCoordsTo([13.4, 52.5])
      }, 'Set to Berlin')), DOM.p(null, DOM.a({
        href: '#',
        onClick: this.setCoordsTo([-112.1, 33.4])
      }, 'Set to Phoenix')), DOM.p(null, DOM.a({
        href: '#',
        onClick: this.setCoordsTo([-75.2, 40])
      }, 'Set to Philadelphia')))));
    }
  }));

}).call(this);
