(function() {
  var Hifo, es;

  es = require('event-stream');

  Hifo = require('hifo-stream');

  module.exports = function(System) {
    var citySearch;
    citySearch = function(keyword) {
      var PlaceTransforms, createReadStream, hifo, key, levelToCity, minResults, opt, resultsSent, sortfn;
      if (!(keyword != null ? keyword.toLowerCase : void 0)) {
        return;
      }
      createReadStream = System.getMethod('kerplunk-place', 'createReadStream');
      PlaceTransforms = System.getMethod('kerplunk-place', 'transforms');
      if (!createReadStream) {
        return console.log('failed to get kerplunk-place:createReadStream');
      }
      keyword = keyword.toLowerCase();
      keyword = keyword.replace(/,.*$/, '');
      resultsSent = 0;
      minResults = 10;
      key = "nm:" + keyword;
      opt = {
        start: key,
        end: key + String.fromCharCode(255)
      };
      levelToCity = es.map(function(data, callback) {
        return callback(null, PlaceTransforms().levelToCity(data.value));
      });
      sortfn = function(a, b) {
        return b.value[6] - a.value[6];
      };
      hifo = Hifo(sortfn, 10);
      return createReadStream(opt).pipe(hifo.filter()).pipe(levelToCity);
    };
    return {
      globals: {
        "public": {
          css: {
            'kerplunk-city-autocomplete:input': 'kerplunk-city-autocomplete/css/city-autocomplete.css'
          }
        }
      },
      routes: {
        "public": {
          '/city-autocomplete': 'demo'
        }
      },
      handlers: {
        demo: 'demo'
      },
      init: function(next) {
        var searchSocket;
        searchSocket = System.getSocket('public-city-autocomplete');
        searchSocket.on('receive', function(spark, data) {
          var stream;
          if (data != null ? data.keyword : void 0) {
            stream = citySearch(data.keyword);
            return stream != null ? stream.on('data', function(obj) {
              return spark.write(obj);
            }) : void 0;
          } else {
            return console.log('client said what?', data);
          }
        });
        searchSocket.on('connection', function(spark, data) {
          return console.log('public-city-autocomplete connection');
        });
        return next();
      }
    };
  };

}).call(this);
